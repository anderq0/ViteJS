import './style.scss'
// –î–ó 2 –∑–∞–¥–∞–Ω–∏–µ 2
type checkType = {
    name: string,
    count: number,
    cost: number,
}

const checkList: checkType[] = [
    {name:'cheese', count:1, cost:43},
    {name:'dog', count:1, cost:12},
    {name:'bread', count:2, cost:54},
    {name:'juice', count:1, cost:10},
]

const DZ2z2Ol = document.getElementById('DZ2z2') as HTMLOListElement
function printCheck(arr:checkType[]){
    let html = ''
    for (let el of arr) {
        html += `<li>${el.name} ${el.count} ${el.cost}</li>` 
    }
    DZ2z2Ol.innerHTML = html
  }
  
printCheck(checkList)

const DZ2z2H5Sum = document.getElementById('sumResult') as HTMLHeadElement
function getSum(arr:checkType[]){
    let sumResult = 0
    for(let el of arr){
        sumResult += el.cost
    }
    DZ2z2H5Sum.innerHTML += String(sumResult)
}
getSum(checkList)

const DZ2z2H5Max = document.getElementById('maxProductCost') as HTMLHeadElement
function getMaxProductCost(arr:checkType[]){
    let maxCost = 0
    let maxCostProduct = ''
    for(let el of arr){
        // el.cost > maxCost? maxCost = el.cost : maxCost = maxCost
        if( el.cost> maxCost){
            maxCost = el.cost
            maxCostProduct = el.name
        }
    }
    DZ2z2H5Max.innerHTML += maxCostProduct + ' '+String(maxCost)
}
getMaxProductCost(checkList)

const DZ2z2H5AverageCost = document.getElementById('midSum') as HTMLHeadElement
function getAverageCost(arr:checkType[]){
    let averageCostResult = 0
    for(let el of arr){
        averageCostResult += el.cost
    }
    averageCostResult = averageCostResult / arr.length
    DZ2z2H5AverageCost.innerHTML += String(averageCostResult)
}
getAverageCost(checkList)


//–î–ó2 –∑–∞–¥–∞–Ω–∏–µ 4

// –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ –∞—É–¥–∏—Ç–æ—Ä–∏–π –∞–∫–∞–¥–µ–º–∏–∏. –û–±—ä–µ–∫—Ç-–∞—É–¥–∏—Ç–æ—Ä–∏—è —Å–æ-
// —Å—Ç–æ–∏—Ç –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å–∞–¥–æ—á–Ω—ã—Ö –º–µ—Å—Ç (–æ—Ç 10 –¥–æ 20) –∏
// –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞.

type audienceArrayType = {
    audienceName: string,
    placeQuentity: number,
    facultyName: string,
}
const audienceArray: audienceArrayType[] = [
    {audienceName: 'first audience', placeQuentity:14, facultyName:'Math'},
    {audienceName: 'second audience', placeQuentity:15, facultyName:'Language'},
    {audienceName: 'third audience', placeQuentity:13, facultyName:'Biology'},
    {audienceName: 'fourth audience', placeQuentity:18, facultyName:'Chemistry'},
    {audienceName: 'fifth audience', placeQuentity:20, facultyName:'Math'},
    {audienceName: 'sixth audience', placeQuentity:20, facultyName:'Biology'},
]

// 1 –í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Å–µ—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π.

const DZ2z4Ol = document.getElementById('DZ2z4') as HTMLOListElement
function getAllAudiences(arr:audienceArrayType[]){
    let html = ''
    for(let el of arr){
        html+= `<li>${el.audienceName}</li>`
    }
    DZ2z4Ol.innerHTML = html
}
getAllAudiences(audienceArray)

// 2  –í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –∞—É–¥–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.
const FindAudienceButton = document.getElementById('findAudience') as HTMLButtonElement
const findAudienceInput = document.getElementById('findAudienceInput') as HTMLInputElement
const audienceResultH5 = document.getElementById('audienceResult') as HTMLHeadElement

function findAudience(arr:audienceArrayType[], facultyNameString:string){
    let html = ''
    let isExist = false
    for(let el of arr){
        if(el.facultyName.toLowerCase() == facultyNameString.toLowerCase() ){
            html += `<p>${el.audienceName}</p>`
            isExist = true
        }
    }
    if(!isExist){
        console.log('ok')
        html+= `<p style="color: red">No such audience üòû</p>`
    }
    audienceResultH5.innerHTML += html
} 
FindAudienceButton.addEventListener('click', function() {
    audienceResultH5.innerHTML = ''
    findAudience(audienceArray, findAudienceInput.value)
    findAudienceInput.value = ''
})


// 3 –í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è
// –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã. –û–±—ä–µ–∫—Ç-–≥—Ä—É–ø–ø–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è,
// –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.
const findAudienceForGroupButton = document.getElementById('findAudienceForGroupButton') as HTMLButtonElement
const findAudienceForGroupInput = document.getElementById('findAudienceForGroupInput') as HTMLInputElement
const AudienceForGroupResult = document.getElementById('AudienceForGroupResult') as HTMLHeadElement

type groupType = {
    groupName: string,
    studentQuentity: number,
    facultyName: string,
}

const groups:groupType[] = [
    {groupName:'genius', studentQuentity:13, facultyName:'Math'},
    {groupName:'good', studentQuentity:13, facultyName:'Language'},
    {groupName:'middle', studentQuentity:13, facultyName:'Biologu'},
    {groupName:'bad', studentQuentity:13, facultyName:'Math'},
    {groupName:'worse', studentQuentity:13, facultyName:'Chemistry'},
]

function findAudienceForGroup(arr:audienceArrayType[], arr2:groupType[], groupName:string){
    let html = ''
    let isExist = false
    for (let key in arr2){
        if(groupName == arr2[key].groupName){
            for(let el of arr){
                if(groupName == arr2[key].groupName&&arr2[key].studentQuentity <= el.placeQuentity && arr2[key].facultyName == el.facultyName){
                    html += `<p>${el.audienceName}</p>`
                    AudienceForGroupResult.innerHTML = html
                    isExist = true
                }
                
            }
        }
    }
    
    if(!isExist){
        html+= `<p style="color: red">No such audience üòû</p>`
        AudienceForGroupResult.innerHTML += html
    }
} 

findAudienceForGroupButton.addEventListener('click', function() {
    AudienceForGroupResult.innerHTML = ''
    findAudienceForGroup(audienceArray, groups, findAudienceForGroupInput.value)
    findAudienceInput.value = ''
})

let someArray = [32,53,1,77,3]
someArray.sort((a,b) => a-b)
console.log(someArray)


// ===========================================================

// 1.1.  –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞—é—â—é—é –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 10
const arrayOfNums:number[] = []
function addArrayOfNums(arr:number[], start=0, end= start+10){
    for(let i=0; i <= 10; i++){
         i == 0? arr.push(start) : i == 10 ? arr.push(end) : arr.push(i+start)
    }
    console.log(arr)
}
addArrayOfNums(arrayOfNums, 14)
// 1.2 - 1.3*. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞—é—â—é—é –º–∞—Å—Å–∏–≤ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 1 –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –±—É–¥—É—â–µ–º –º–∞—Å—Å–∏–≤–µ
// –î–æ–±–∞–≤–∏—Ç—å –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
const ArrayOfRandomNums:number[] =[]
function addArrayOfRandomNums(arr:number[], arrayLength:number){
    for(let i= 0; i < arrayLength; i++){
        arr.push(Math.floor(Math.random() * 100 ))
    }
    console.log(arr)
}
addArrayOfRandomNums(ArrayOfRandomNums,9)

// 2.1 - 2.4
const someDiv = document.getElementById('someIdForDiv') as HTMLDivElement
function sayHelloToUser(name='user' ){
    // navigator.geolocation.getCurrentPosition(async (position) => {
    //     const { latitude: lat, longitude: lon } = position.coords;  // –í–∞—à–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã!
    //     const res = await fetch(`https://api.bigdatacloud.net/data/reverse-geocode-client?latitude=${lat}&longitude=${lon}&localityLanguage=ru`);
    //     const { city } = await res.json(); // –ò –≤–æ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞!
    //     someDiv.innerHTML = `–ü—Ä–∏–≤–µ—Ç, ${name}! –í–∞—à –≥–æ—Ä–æ–¥ ${city}`
    //   });
      someDiv.innerHTML = `–ü—Ä–∏–≤–µ—Ç, ${name}!`
}
sayHelloToUser('gaya')

// –ï—Å—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
type employeesType = {
    name:string,
    department: string,
    salary:number
}

const employees:employeesType[] = [
    { name: '–§–µ–¥–æ—Ç–æ–≤–∞ –ê—Ä–∏–Ω–∞ –ì–ª–µ–±–æ–≤–Ω–∞', department: 'ads', salary: 2100 },
    { name: '–ì–æ–ª–∏–∫–æ–≤–∞ –ú–∞—Ä–∏—è –§–∏–ª–∏–ø–ø–æ–≤–Ω–∞', department: 'prog', salary: 3500 },
    { name: '–ü–∞–Ω–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì–µ—Ä–º–∞–Ω–æ–≤–∏—á', department: 'ads', salary: 2100 },
    { name: '–†–æ–º–∞–Ω–æ–≤ –≠–º–∏–ª—å –ú–∞–∫–∞—Ä–æ–≤–∏—á', department: 'prog', salary: 3100 },
    { name: '–°–º–∏—Ä–Ω–æ–≤ –ù–∏–∫–∏—Ç–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', department: 'prog', salary: 3800 },
    { name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∞ –ú–∞–π—è –í—è—á–µ—Å–ª–∞–≤–æ–≤–Ω–∞', department: 'prog', salary: 4500 },
    { name: '–ö—Ä—ã–ª–æ–≤ –ë–æ–≥–¥–∞–Ω –ú–∞–∫—Å–∏–º–æ–≤–∏—á', department: 'disign', salary: 2100 },
    { name: '–ú—É—Ö–∏–Ω–∞ –ê–π—à–∞ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–Ω–∞', department: 'disign', salary: 2100 },
  ]

// 3.1. –°–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –º–∞—Å—Å–∏–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤, –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–¥–µ–ª–æ–≤ (department)
function departmentUnqiue(arr:employeesType[]){
    const departmentUniqueArray:string[] = []
    arr.forEach(el=>{
        if(!departmentUniqueArray.includes(el.department)){
            departmentUniqueArray.push(el.department)
        }
    })
    return departmentUniqueArray
}
console.log('Unique department: ',departmentUnqiue(employees))



// 3.2. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –º–∞—Å—Å–∏–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∏ –∫–ª—é—á –æ–±—ä–µ–∫—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–¥–µ–ª–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –º–∞—Å—Å–∏–≤–∞
// –£—á–µ—Å—Ç—å, —á—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ localeCompare, –∞ —á–∏—Å–ª–æ–≤—ã–µ,- –≤—ã—á–∏—Ç–∞–Ω–∏–µ–º
function sortEmployers(arr:employeesType[], key:'name' | 'department' | 'salary'){
    if(key == 'name' || key == 'department'){
        arr.sort((a,b) => a[key].localeCompare(b[key]))
    }else if( key == 'salary'){
        arr.sort((a,b) =>a.salary-b.salary)
    }
    console.log([...arr])
}
sortEmployers(employees, 'salary')

// 3.3. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –æ–ø–∏—Å–∞–Ω–Ω–æ–π –≤ –∑–∞–¥–∞–Ω–∏–∏ 2.2., –Ω–æ —Å–æ—Ä—Ç–∏—Ä—É—é—â—É—é –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
function sortEmployersReverse(arr:employeesType[], key:'name' | 'department' | 'salary'){
    sortEmployers(arr, key)
    console.log([...arr.reverse()])
}
sortEmployersReverse(employees, 'salary')


// 3.4. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –º–∞—Å—Å–∏–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∏ –∏–º—è, –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –æ–±—ä–µ–∫—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ undefined
function findEmployerObject(arr:employeesType[], name:string){
    for(let el of arr){
        el.name == name ? console.log(el) : el.name
    }
}
findEmployerObject(employees, '–§–µ–¥–æ—Ç–æ–≤–∞ –ê—Ä–∏–Ω–∞ –ì–ª–µ–±–æ–≤–Ω–∞')
findEmployerObject(employees, 'sgudfyuew')
// 3.5. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –º–∞—Å—Å–∏–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞, –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞
function getAllEmployersByDepartment(arr:employeesType[], departmentTo:string){
    let AllEmployersByDepartment:employeesType[] = []
    for(let el of arr){
        el.department == departmentTo? AllEmployersByDepartment.push(el) : AllEmployersByDepartment
    }
    console.log(AllEmployersByDepartment)
    return AllEmployersByDepartment
}
getAllEmployersByDepartment(employees, 'prog')
// 3.6. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –º–∞—Å—Å–∏–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å—É–º–º—É –∑–∞—Ä–ø–ª–∞—Ç. –í—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –æ—Ç–¥–µ–ª—É –∏ –ø–æ –æ–±—â–µ–º—É –º–∞—Å—Å–∏–≤—É
let salaryArray = 0
function getSalaryOfEmployers(arr:employeesType[], departmentTo = 'any'){
    for(let el of arr){
        el.department == departmentTo ? salaryArray += el.salary : departmentTo == 'any' ? salaryArray = arr.reduce((sum, salary) => sum+ salary.salary, 0) : salaryArray
    }
    console.log(salaryArray)
}
getSalaryOfEmployers(employees, 'ads')
getSalaryOfEmployers(employees, 'prog')


// 3.7. –í HTML —Å–æ–∑–¥–∞—Ç—å div –¥–ª—è –∫–Ω–æ–ø–æ–∫, –∑–∞–¥–∞—Ç—å –µ–º—É id –∏ –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç div'a –≤ js, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∑–∞–¥–∞–Ω–∏—é 2.2.

// 3.8. –¢–∞–∫ –∂–µ –∫–∞–∫ –≤ 3.7 —Å–æ–∑–¥–∞—Ç—å ul (as HTMLUListElement) –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∏ div –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—É–º–º—ã –∑–∞—Ä–ø–ª–∞—Ç
const tableForEmployeesZadanie = document.getElementById('tableForEmployees') as HTMLTableElement
const DivForSumSalaryZadanie = document.getElementById('DivForSumSalary') as HTMLDivElement
function getArrayOfEmployees(arr:employeesType[]){
    let salarySum = 0 
    let html = '<thead> <tr> <th>–ò–º—è</th> <th>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç</th> <th>–ó–∞—Ä–ø–ª–∞—Ç–∞</th> </tr></thead><tbody>'
    for(let el of arr){
        html += `<tr><td>${el.name}</td>    <td>${el.department}</td>   <td>${el.salary} </td></tr>`
        salarySum += el.salary
    }
    tableForEmployeesZadanie.innerHTML = html + `</thead>`
    DivForSumSalaryZadanie.innerHTML = `<b>Final Sum Of Salaries: </b>` + String(salarySum)

}
getArrayOfEmployees(employees)

// 3.9. –ò—Å–ø–æ–ª—å–∑—É—è –º–∞—Å—Å–∏–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ 3.1. –í—ã–≤–µ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –æ—Ç–¥–µ–ª–æ–≤ + –∫–Ω–æ–ø–∫—É "–í—Å–µ –æ—Ç–¥–µ–ª—ã"
//      –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å data-–∞—Ç—Ä–∏–±—É—Ç (data-dep), –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–µ—Å—Ç–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞. –î–ª—è –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –æ—Ç–¥–µ–ª—ã" data-dep="all"
const buttonDivs = document.getElementById('butDivs') as HTMLDivElement

function renderButtons(arr: string[]) {
  let html = ''
  for (let el of arr) {
    html += `<button style="background-color: #316680; width: 80px; color: white; border-color: #316680; border-width: 5px;
    margin-left: 20px; margin-bottom: 5px;" data-dep="${el}">${el.toUpperCase()}</button>`
  }
  html += `<button style="background-color: #316680; width: 80px; color: white; border-color: #316680; border-width: 5px;
  margin-left: 20px; margin-bottom: 5px;" data-dep="all">ALL</button>`
  buttonDivs.innerHTML = html
}

renderButtons(departmentUnqiue(employees))
buttonDivs.addEventListener('click', function (e) {
    const target = e.target as HTMLElement
    if (target.tagName == 'BUTTON' && target.dataset.dep) {
      if (target.dataset.dep == 'all') {
        getArrayOfEmployees(employees)
      } else {
        getArrayOfEmployees(getAllEmployersByDepartment(employees, target.dataset.dep))
      }
    }
  })

// 3.10. –ò—Å–ø–æ–ª—å–∑—É—è div, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ –∑–∞–¥–∞–Ω–∏–∏ 3.7
// div37.addEventListener('click', function (e) {
//   const target = e.target as HTMLElement
//   if (target.tagName == 'BUTTON' && target.dataset.dep) {
//      –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è dep –≤—ã–≤–æ–¥–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ (ul 3.8) —Ç–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –¥–∞–Ω–Ω–æ–º –æ—Ç–¥–µ–ª–µ, –ª–∏–±–æ –≤—Å–µ—Ö, –µ—Å–ª–∏ target.dataset.dep=='all'. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≤–µ—Ç–≤–ª–µ–Ω–∏–µ –∏ —É–∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
//      –≤ div (3.8) –≤—ã–≤–æ–¥–∏—Ç—å —Å—É–º–º—É –∑–∞—Ä–ø–ª–∞—Ç
//   }
// })

//======================================================
const whatThreePointMean = ['hello', 'this', 'is', 'gaya']
console.log(...whatThreePointMean)
console.log(whatThreePointMean)
const numsForTest:number[] = [1,2,3,4,5,6,7,8,9]
console.log(Math.max(...numsForTest))

const fruits = ['kiwi', 'orange', 'kiwi', 'apple', 'orange']
console.log(fruits)
// function fruitCounter(list:string[]){
//     const count = {}

//     list.forEach(f => {
//         !count[f] ? count[f] = 1 : count[f]++
//         console.log(count[f])
//     })

//     return count
// }
// console.log(fruitCounter(fruits)
console.log(15..toString())
